{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 *  paragraph.field_custom_css_style.0 ? paragraph.field_custom_css_style|clean_class.0|clean_class
 */
#}
{% set text_size = paragraph.field_text_size.0.entity %}
{% set text_alignment = paragraph.field_text_alignment.entity %}
{%
  set classes = [
  text_alignment.field_css_class.value ? text_alignment.field_css_class.value|clean_class,
  text_size.field_css_class.value ? paragraph.field_text_size.entity.field_css_class.value|clean_class
]
%}
{% set title_tag = pizzetta_settings.title_level ? pizzetta_settings.title_level : 'h2' %}
{% set titleAttrs = create_attribute() %}
{% set title_class = [
  "component--title",
  pizzetta_settings.hide_title == 1 ? "invisible"
]
%}

{% if pizzetta_settings.background_color.0.value %}
  {% set bg_color = 'background-color:' ~ pizzetta_settings.background_color.0.value ~ ';' %}
{% endif %}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="component--content">
      {{ content.contextual_links }}
      {% if paragraph.field_title.value %}
      <{{ title_tag }} {{ titleAttrs.addClass(title_class) }}>
      {{- paragraph.field_title.value -}}
    </{{ title_tag }}>
    {% endif %}
    {% if paragraph.field_terms.0 %}
      <div class="grid up-{{ paragraph.field_articles_per_row.0 ? paragraph.field_articles_per_row.0.value : 'auto' }} {{ 'items-count-'~ paragraph.field_articles|length }}">
        {% for item in paragraph.field_terms %}
          {{ drupal_entity('taxonomy_term', item.target_id, 'card' ) }}
        {% endfor %}
      </div>
    {% endif %}
    {% if paragraph.field_view_more.0 %}
      <footer class="actions">
        <a class="action small" href="{{ content.field_view_more.0['#url'] }}">{{ paragraph.field_view_more.0.title ? paragraph.field_view_more.0.title : 'View more' }}</a>
      </footer>
    {% endif %}
  </div>
  {% if pizzetta_settings.background_image %}
    {% set opacity = pizzetta_settings.background_image_opacity ? 'opacity: '~ pizzetta_settings.background_image_opacity ~ '; ' : '' %}
    {% set image = pizzetta_settings.background_image.entity.field_media_image.entity.fileuri | image_style('scale_1920') %}
    {% set bg_image = 'background-image: url("' ~ image ~ '");' %}
    <img class="invisible" src='{{ image }}'  />
    <div class="component--bg" style="{{ opacity }} {{ bg_image }}"></div>
  {% endif %}
  </div>
{% endblock paragraph %}
